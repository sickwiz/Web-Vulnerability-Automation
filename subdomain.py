try:
    import time
    from sys import __stdout__, stdout
    from threading import Thread
    from subprocess import *
    import os
    import sys
    import subprocess
    import threading
    import readline
    from termcolor import colored
except ImportError:
    print("\ncheck for prerequisities ")

fileObject = ''
fileName = ''
folderName = ''


def findDomain(target):

    os.system('clear')
    p = './output/subdomains/'
    try:
        os.mkdir(p)

    except FileExistsError:
        pass
    global fileObject
    try:
        subprocess.run('rm output/subdomains/*.txt', shell=True, stdout=PIPE)
    except FileNotFoundError:
        pass
    cmd = [
        ' subfinder -d ' + target + ' -o subfinder_psub.txt',
        ' assetfinder --subs-only ' + target + '| anew -q assetfinder_psub.txt',
        ' amass enum -passive -d ' + target +
        ' -config ~/.config/amass/config.ini -o amass_psub.txt',
        ' findomain -t ' + target + ' -u findomain_psub.txt',
        ' waybackurls ' + target + '| unfurl --unique domains | anew -q waybackurls_psub.txt',
        ' gauplus -t 50 -subs ' + target +
        '|unfurl --unique domains | anew -q gau_psub.txt',
        'crobat -s ' + target + '|anew -q crobat_psub.txt',
        ' cat *_psub.txt | sed "s/*.//" | anew output/subdomains/passive_subs.txt | wc -l'
    ]
    try:

        for c in cmd:
            proc = subprocess.run(
                c, shell=True, stderr=STDOUT, stdout=sys.stdout)
            # err, out = proc.communicate()
        if(proc.returncode != 0):
            print(colored('Step 1 Failed! Check/Update prerequisitie packages. \nError: ',
                  'blue', attrs=['bold']) + proc.stderr.rstrip())
            return False
        else:

            fileObject = open('output/subdomains/probed_subdomains.txt', 'w+')
            subprocess.run("cat output/subdomains/passive_subs.txt | httpx -follow-host-redirects -status-code -threads 50 -timeout 15  -retries 2 -no-color | cut -d ' ' -f1 | grep '.{}$' | anew ".format(target), shell=True, stdout=fileObject)

            # print(colored("[x] Executed", 'blue', attrs=['bold']))
            # print(colored(">> Cleaning the temporary files << ",
            #       'yellow', attrs=['bold']))
            subprocess.run('rm *_psub.txt', shell=True, stdout=PIPE)
            return True
    except:
        print("Something went wrong! Trying again\n")
        return False


# result = subdomain('jiit.ac.in')
# mylist = []
# for l in result:
#     mylist.append(l.replace("\n", ""))
# return mylist
